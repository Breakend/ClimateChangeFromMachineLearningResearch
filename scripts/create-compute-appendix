#!/usr/bin/env python3

from __future__ import print_function
import os
import sys
import argparse
from datetime import datetime
import numpy as np
from pylatex import Document, Section, Subsection, Table, Tabular, Math, TikZ, Axis, \
    Plot, Figure, Package, LineBreak
from pylatex.utils import escape_latex

from experiment_impact_tracker.compute_tracker import load_initial_info, load_data_into_frame, PUE

def main(arguments):

    parser = argparse.ArgumentParser(
        description=__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)
    parser.add_argument('logdir', help="Input file", type=str)
    args = parser.parse_args(arguments)

    info = load_initial_info(args.logdir)

    doc = Document()

    with doc.create(Section('Device and Version Information')):
        with doc.create(Subsection('CPU Information')):
            doc.append('Brand: ' + str(info["cpu_info"]["brand"]))
            doc.append(LineBreak())
            doc.append('Hz (Actual): ' + (str(info["cpu_info"]["hz_actual"])))
        with doc.create(Subsection('GPU Information')):
            num_gpus =  len(info["gpu_info"])
            doc.append("Num GPUs: " + str(num_gpus))
            doc.append(LineBreak())
            doc.append('GPU Info: ' + (",".join([x["name"] for x in info["gpu_info"]])))
            # TODO: more gpu info
        with doc.create(Subsection('Carbon Estimation Information')):
            with doc.create(Tabular('|r|c|')) as table:
                table.add_hline()
                table.add_row(['Climate Impact Tracker Version', info["experiment_impact_tracker_version"]])
                table.add_hline()
                table.add_row(('Compute Region', info["region"]["id"]))
                table.add_hline()
                table.add_row(('Region Carbon Intensity Estimate (gCO2eq/kWh)',str(info["region_carbon_intensity_estimate"]["carbonIntensity"])))
                table.add_hline()
                table.add_row(('Region Carbon Intensity Estimate Data Source', str(info["region_carbon_intensity_estimate"]["_source"])))
                table.add_hline()
                table.add_row(('Assumed PUE',str(PUE)))
                table.add_hline()

    df = load_data_into_frame(args.logdir)
    exp_len = df["timestamp"].iloc[-1] - datetime.timestamp(info["experiment_start"])
    exp_len_hours = exp_len/3600.
    # integrate power
    # https://electronics.stackexchange.com/questions/237025/converting-watt-values-over-time-to-kwh
    # multiply by carbon intensity to get Kg Carbon eq

    time_differences = df["timestamp"].diff()
    time_differences[0] = df["timestamp"][0] - datetime.timestamp(info["experiment_start"])
    kw_hr_rapl = np.multiply(time_differences/3600., df["rapl_estimated_attributable_power_draw"]).sum() #elementwise multiplication and sum
    kw_hr_nvidia = np.multiply(time_differences/3600., df["nvidia_estimated_attributable_power_draw"]).sum() #elementwise multiplication and sum
    total_power = PUE*(kw_hr_nvidia + kw_hr_rapl)
    estimated_carbon_impact= total_power * info["region_carbon_intensity_estimate"]["carbonIntensity"] / 1000.0
    gpu_hours = np.multiply(time_differences/3600., df["average_gpu_estimated_utilization"] / 100.0).sum() * num_gpus # GPU-hours percent utilization * length of time utilized (assumes absolute utliziation) 
    with doc.create(Section('Experiment Info')):
        with doc.create(Tabular('|r|c|')) as table:
            table.add_hline()
            table.add_row(('Experiment Start Time', str(datetime.timestamp(info["experiment_start"]))))
            table.add_hline()
            table.add_row(('Experiment Length (hours)', str(exp_len_hours)))
            table.add_hline()
            table.add_row(('Intel (CPU+DRAM, RAPL) Power Usage (kWh)',  str(kw_hr_rapl)))
            table.add_hline()
            table.add_row('NVIDIA (GPU) Power Usage (kWh)',  str(kw_hr_nvidia))
            table.add_hline()
            table.add_row('Total (Including PUE Mult.) Power (kWh)',  str(total_power))
            table.add_hline()
            table.add_row(('Estimated Carbon Impact (kgCO2eq)', str(estimated_carbon_impact)))
            table.add_hline()
            table.add_row(('Final CPU-Hours (psutil estimate)', str(df['cpu_time_seconds'].iloc[-1]/3600.)))
            table.add_hline()
            table.add_row(('Final GPU-Hours (climate-impact-tracker estimate)', str(gpu_hours)))
            table.add_hline()

    doc.generate_tex(os.path.join(args.logdir, 'impact_appendix'))
    doc.generate_pdf(os.path.join(args.logdir, 'impact_appendix'))

    # log average gpu/cpu usage
    # log cpu/gpu hours
    # can we also get energy in joules?

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))

