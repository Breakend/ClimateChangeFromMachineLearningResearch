#!/usr/bin/env python3

from __future__ import print_function

import argparse
import os
import sys
from datetime import datetime
import scipy
import re
import pandas as pd
import numpy as np
from pprint import pprint
from jinja2 import Environment, FileSystemLoader
import experiment_impact_tracker
from experiment_impact_tracker.data_utils import load_data_into_frame, load_initial_info, zip_data_and_info
from experiment_impact_tracker.constants import PUE         
from experiment_impact_tracker.stats import run_test, get_average_treatment_effect
from experiment_impact_tracker.emissions.common import get_realtime_carbon_source
from experiment_impact_tracker.get_region_metrics import get_zone_name_by_id
from shutil import copyfile
from experiment_impact_tracker.create_graph_appendix import create_graphs, create_scatterplot_from_df
import json
from deepdiff import DeepDiff  # For Deep Difference of 2 objects
from itertools import combinations 
# def _easy_compare(dict_1, dict_2):
#     dump = json.dumps(dict_1, sort_keys=True)
#     dump2 = json.dumps(dict_2, sort_keys=True)
#     return dump == dump2 
from importlib import import_module

pd.set_option('display.max_colwidth', -1)
# TODO: give experiment set a name and then iterate through each one
# TODO: Each individual one should make a new file and then a summary file and a differences file

from experiment_impact_tracker.utils import gather_additional_info


def main(arguments):

    parser=argparse.ArgumentParser(
        description = __doc__,
        formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('logdirs', nargs = '+',
                        help = "Input directories", type = str)
    parser.add_argument("--experiment_1_filter", type=str, default="filter for dirs for experiment 1")
    parser.add_argument("--experiment_2_filter", type=str, default="filter for dirs for experiment 2")
    args=parser.parse_args(arguments)

    all_log_dirs = []

    for log_dir in args.logdirs:
        for path, subdirs, files in os.walk(log_dir):
            if "impacttracker" in path:
                all_log_dirs.append(path.replace("impacttracker", "").replace("//", "/"))

    all_log_dirs = list(set(all_log_dirs))

    


if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
