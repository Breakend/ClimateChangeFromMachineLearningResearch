#!/usr/bin/env python3

from __future__ import print_function

import argparse
import os
import sys
from datetime import datetime
import scipy
import numpy as np

from experiment_impact_tracker.compute_tracker import (PUE,
                                                       load_data_into_frame,
                                                       load_initial_info)
from experiment_impact_tracker.stats import run_test, get_average_treatment_effect
from pylatex import (Axis, Document, Figure, LineBreak, Math, Package, Plot,
                     Section, Subsection, Subsubsection, Table, Tabular, TikZ)
from pylatex.utils import escape_latex
import json
from deepdiff import DeepDiff  # For Deep Difference of 2 objects

# def _easy_compare(dict_1, dict_2):
#     dump = json.dumps(dict_1, sort_keys=True)
#     dump2 = json.dumps(dict_2, sort_keys=True)
#     return dump == dump2 



def _generate_experiment_table(logdir, doc, info):
    with doc.create(Section('Experiment {}'.format(logdir))):
        with doc.create(Subsection('Device and Version Information')):
            with doc.create(Subsubsection('CPU Information')):
                with doc.create(Tabular('|r|p{8cm}|')) as table:
                    table.add_hline()
                    for key, value in info['cpu_info'].items():
                        if isinstance(value, list):
                            value = ", ".join([str(x) for x in value])
                        table.add_row((key, value))
                        table.add_hline()
                # doc.append('Brand: ' + str(info["cpu_info"]["brand"]))
                # doc.append(LineBreak())
                # doc.append('Hz (Actual): ' +
                #    (str(info["cpu_info"]["hz_actual"])))
            with doc.create(Subsubsection('GPU Information')):
                num_gpus = len(info["gpu_info"])
                doc.append("Num GPUs: {}\n".format(num_gpus))
                for gpu in info["gpu_info"]:
                    with doc.create(Tabular('|r|p{8cm}|')) as table:
                        table.add_hline()
                        for key, value in gpu.items():
                            if isinstance(value, list):
                                value = ",".join(value)
                            table.add_row((key, value))
                            table.add_hline()
                # doc.append(LineBreak())
                # doc.append('GPU Info: ' +
                #            (",".join([x["name"] for x in info["gpu_info"]])))
                # TODO: more gpu info
            with doc.create(Subsubsection('Carbon Estimation Information')):
                with doc.create(Tabular('|r|p{8cm}|')) as table:
                    table.add_hline()
                    try:
                        table.add_row(['Experiment Impact Tracker Version',
                                    info["experiment_impact_tracker_version"]])
                    except:
                        table.add_row(['Experiment Impact Tracker Version',
                                    info["climate_impact_tracker_version"]])
                    table.add_hline()
                    table.add_row(('Compute Region', info["region"]["id"]))
                    table.add_hline()
                    table.add_row(('region est. gCO2eq/kWh',
                                  str(info["region_carbon_intensity_estimate"]["carbonIntensity"])))
                    table.add_hline()
                    table.add_row(('Carbon Data Source', str(
                        info["region_carbon_intensity_estimate"]["_source"])))
                    table.add_hline()
                    table.add_row(('Assumed PUE', str(PUE)))
                    table.add_hline()

        df = load_data_into_frame(logdir)
        exp_len = df["timestamp"].iloc[-1] - \
            datetime.timestamp(info["experiment_start"])
        exp_len_hours = exp_len/3600.
        # integrate power
        # https://electronics.stackexchange.com/questions/237025/converting-watt-values-over-time-to-kwh
        # multiply by carbon intensity to get Kg Carbon eq

        time_differences = df["timestamp"].diff()
        time_differences[0] = df["timestamp"][0] - \
            datetime.timestamp(info["experiment_start"])
        # elementwise multiplication and sum
        time_differences_in_hours = time_differences/3600.
        power_draw_rapl_kw = df["rapl_estimated_attributable_power_draw"] / 1000.
        kw_hr_rapl = np.multiply(time_differences_in_hours, power_draw_rapl_kw).sum()
        nvidia_power_draw_kw = df["nvidia_estimated_attributable_power_draw"] / 1000.
        # elementwise multiplication and sum
        kw_hr_nvidia = np.multiply(time_differences_in_hours, nvidia_power_draw_kw).sum()
        total_power = PUE * (kw_hr_nvidia + kw_hr_rapl)
        estimated_carbon_impact_grams = total_power * \
            info["region_carbon_intensity_estimate"]["carbonIntensity"] 
        estimated_carbon_impact_kg = estimated_carbon_impact_grams / 1000.0
        # GPU-hours percent utilization * length of time utilized (assumes absolute utliziation)
        gpu_hours = np.multiply(
            time_differences_in_hours, df["average_gpu_estimated_utilization_absolute"]).sum() * num_gpus
        with doc.create(Subsection('Experiment Info')):
            with doc.create(Tabular('|r|c|')) as table:
                table.add_hline()
                table.add_row(('Experiment Start Time', str(
                    datetime.timestamp(info["experiment_start"]))))
                table.add_hline()
                table.add_row(
                    ('Experiment Length (hours)', str(exp_len_hours)))
                table.add_hline()
                table.add_row(
                    ('Intel (CPU+DRAM, RAPL) Power Usage (kWh)', str(kw_hr_rapl)))
                table.add_hline()
                table.add_row('NVIDIA (GPU) Power Usage (kWh)',
                              str(kw_hr_nvidia))
                table.add_hline()
                table.add_row(
                    'Total (Including PUE Mult.) Power (kWh)', str(total_power))
                table.add_hline()
                table.add_row(('Estimated Carbon Impact (kgCO2eq)',
                              str(estimated_carbon_impact_kg)))
                table.add_hline()
                table.add_row(('Final CPU-Hours (psutil estimate)',
                              str(df['cpu_time_seconds'].iloc[-1]/3600.)))
                table.add_hline()
                table.add_row(
                    ('Final GPU-Hours (climate-impact-tracker estimate)', str(gpu_hours)))
                table.add_hline()

    return { "carbon_impact": estimated_carbon_impact_kg, 
             "cpu_hours": df['cpu_time_seconds'].iloc[-1]/3600., 
             "gpu_hours": gpu_hours, 
             "total_power_usage": total_power, 
             "gpu_power_usage": kw_hr_nvidia, 
             "cpu_package_power_usage": kw_hr_rapl,
             "experiment_time" : exp_len_hours
             }


def main(arguments):

    parser=argparse.ArgumentParser(
        description = __doc__,
        formatter_class = argparse.RawDescriptionHelpFormatter)
    parser.add_argument('logdirs', nargs = '+',
                        help = "Input directories", type = str)
    parser.add_argument('--compare_dirs', nargs = '+',
                        help = "Compare against another set of directories. E.g., Outputs all experiment appendices, aggregated results, and a statistical comparison between the two sets of experiments.", type = str)
    args=parser.parse_args(arguments)
    
    # TODO: add flag for summary stats instead of table for each, this should create a shorter appendix

    doc=Document()
    aggregated_info={}

    gpu_infos = []
    cpu_infos = []

    for x in args.logdirs:
        info = load_initial_info(x)
        gpu_infos.append(info["gpu_info"])
        cpu_infos.append(info["cpu_info"])
        extracted_info = _generate_experiment_table(x, doc, info)
        for key, value in extracted_info.items():
            if key not in aggregated_info:
                aggregated_info[key] = []
            aggregated_info[key].append(value)

    with doc.create(Section('Experiment Set 1')):
        with doc.create(Subsection('Averaged')):
            with doc.create(Tabular('|r|c|')) as table:
                table.add_hline()
                for key, values in aggregated_info.items():
                    values_mean = np.mean(values)
                    values_stdder = scipy.stats.sem(values)
                    table.add_row((key, "{} +/- {} (stderr)".format(values_mean, values_stdder )))
                    table.add_hline()
        with doc.create(Subsection('Cumulative')):
            with doc.create(Tabular('|r|c|')) as table:
                table.add_hline()
                for key, values in aggregated_info.items():
                    values_summed = np.sum(values)
                    table.add_row((key, "{}".format(values_summed)))
                    table.add_hline()
    old_aggregate_info = aggregated_info
    aggregated_info={}
    old_gpu_infos = gpu_infos
    old_cpu_infos = cpu_infos
    cpu_infos = []
    gpu_infos = []

    if args.compare_dirs:
        for x in args.compare_dirs:
            info = load_initial_info(x)
            gpu_infos.append(info["gpu_info"])
            cpu_infos.append(info["cpu_info"])
            extracted_info = _generate_experiment_table(x, doc, info)
            for key, value in extracted_info.items():
                if key not in aggregated_info:
                    aggregated_info[key] = []
                aggregated_info[key].append(value)

        with doc.create(Section('Experiment Set 2')):
            with doc.create(Subsection('Averaged')):
                with doc.create(Tabular('|r|c|')) as table:
                    table.add_hline()
                    for key, values in aggregated_info.items():
                        values_mean = np.mean(values)
                        values_stdder = scipy.stats.sem(values)
                        table.add_row((key, "{:.6g} +/- {:.6g} (stderr)".format(values_mean, values_stdder)))
                        table.add_hline()
            with doc.create(Subsection('Cumulative')):
                with doc.create(Tabular('|r|c|')) as table:
                    table.add_hline()
                    for key, values in aggregated_info.items():
                        values_summed = np.sum(values)
                        table.add_row((key, "{}".format(values_summed)))
                        table.add_hline()

        
        with doc.create(Section('Experiment Set Difference')):
            with doc.create(Subsection('Average Treatment Effect (Per Experiment in Experiment Set)')):
                with doc.create(Tabular('|r|c|')) as table:
                    table.add_hline()
                    for key, values in aggregated_info.items():
                        delta, delta_err = get_average_treatment_effect(values, old_aggregate_info[key])
                        _,p = run_test("Welch t-test", values, old_aggregate_info[key])
                        table.add_row((key, "{:.6g} +/- {:.6g} (stderr) (p={:.6g}, Welch's t-test)".format(delta, delta_err, p)))
                        table.add_hline()

            with doc.create(Subsection('Cumulative Difference (Per Experiment Set)')):
                with doc.create(Tabular('|r|c|')) as table:
                    table.add_hline()
                    for key, values in aggregated_info.items():
                        delta = np.sum(values) - np.sum(old_aggregate_info[key])
                        # delta_err = 1.96 * np.sqrt(np.var(values) / len(values) + \
                        #     np.var(old_aggregate_info[key]) / len(old_aggregate_info[key]))
        
                        table.add_row((key, "{}".format(delta)))
                        table.add_hline()


        num_gpus = ([len(x) for x in gpu_infos])
        num_gpus_old = ([len(x) for x in old_gpu_infos])
        if sorted(num_gpus_old) != sorted(num_gpus):
            raise NotImplementedError("You're looking to compare two sets of experiments with a different heterogeneous make-up of GPU numbers.")

        ddiff = DeepDiff(gpu_infos, old_gpu_infos, ignore_order=True)
        if ddiff:
            print(ddiff)
            raise NotImplementedError("You're looking to compare two sets of heterogeneous GPUs that are of different compositions. This will result in uncomparable results.")

        # TODO: actual Hz is never the same so maybe look at some subset of metrics or make sure average Hz is somewhat similar
        ignore_cpu_attrs = ["hz_actual", "hz_actual_raw", "flags"]
        for cpu_info in cpu_infos:
            for attr in ignore_cpu_attrs:
                del cpu_info[attr]
        for cpu_info in old_cpu_infos:
            for attr in ignore_cpu_attrs:
                del cpu_info[attr]

        ddiff = DeepDiff(cpu_infos, old_cpu_infos, ignore_order=True)
        if ddiff:
            print(ddiff)
            raise NotImplementedError("You're looking to compare two sets of heterogeneous CPUs that are of different compositions. This will result in uncomparable results.")

    doc.generate_tex(os.path.join('./', 'impact_appendix'))
    doc.generate_pdf(os.path.join('./', 'impact_appendix'))

    # log average gpu/cpu usage
    # log cpu/gpu hours
    # can we also get energy in joules?

if __name__ == '__main__':
    sys.exit(main(sys.argv[1:]))
